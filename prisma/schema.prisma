datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URI")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

generator docs {
    provider = "node node_modules/prisma-docs-generator"
}

model Profile {
    id        Int     @id @default(autoincrement())
    firstName String
    lastName  String
    image     String?
    location  String?

    user   User? @relation(fields: [userId], references: [id])
    userId Int   @unique
}

model User {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    id                 Int     @id @default(autoincrement())
    email              String  @unique
    emailVerified      Boolean @default(false)
    phoneVerified      Boolean @default(false)
    tokenVersion       Int     @default(0)
    username           String  @unique
    role               Role    @default(USER)
    phone              String? @unique
    password           String?
    resetPasswordToken Int?

    books                Book[]
    profile              Profile?
    profileId            Int?
    savedBooks           Book[]        @relation("SavedBooks")
    BookComments         BookComment[]
    likedBookComments    BookComment[] @relation("LikedBookComments")
    dislikedBookComments BookComment[] @relation("DislikedBookComments")
}

model Book {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    id        Int      @id @default(autoincrement())
    views     Int      @default(0)
    published Boolean  @default(false)
    name      String
    author    String
    price     Float
    ISBN      String?
    body      Json?
    keywords  String[]
    images    String[]

    seller   User?         @relation(fields: [sellerId], references: [id])
    sellerId Int?
    tags     BookTag[]
    comments BookComment[]
    savedBy  User[]        @relation("SavedBooks", fields: [userId], references: [id])
    userId   Int?
}

model BookTag {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    tagId Int    @id @default(autoincrement())
    name  String

    book   Book[] @relation(fields: [bookId], references: [id])
    bookId Int?
}

model BookComment {
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    id      Int    @id @default(autoincrement())
    content String

    book        Book          @relation(fields: [bookId], references: [id])
    bookId      Int
    user        User?         @relation(fields: [userId], references: [id])
    userId      Int?
    repliedToId Int?
    repliedTo   BookComment?  @relation("BookCommentReplies", references: [id], fields: [repliedToId])
    replies     BookComment[] @relation("BookCommentReplies")
    likes       User[]        @relation("LikedBookComments", references: [id])
    dislikes    User[]        @relation("DislikedBookComments", references: [id])
}

enum Role {
    USER
    ADMIN
    SUPERADMIN
    SELLER
}
